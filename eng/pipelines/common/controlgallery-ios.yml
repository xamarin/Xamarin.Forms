steps:
  - checkout: self
    clean: true

  - task: xamops.azdevex.provisionator-task.provisionator@1
    displayName: 'Provision Xcode'
    condition: ne(variables['REQUIRED_XCODE'], '')
    inputs:
      provisioning_script: $(provisionator.xcode)

  - task: xamops.azdevex.provisionator-task.provisionator@1
    displayName: 'Provisionator'
    condition: eq(variables['provisioning'], 'true')
    inputs:
      provisioning_script: $(provisionator.path)
      provisioning_extra_args: $(provisionator.extraArguments)

  - script: |
      echo "##vso[task.prependpath]/Library/Frameworks/Mono.framework/Versions/Current/Commands/"
      echo "##vso[task.prependpath]~/Library/Developer/Xamarin/android-sdk-macosx"
    displayName: 'Setup SDK Paths'
    condition: ne(variables['osx2019VmPool'], 'Azure Pipelines')

  - task: Bash@3
    displayName: 'Cake Provision'
    condition: eq(variables['provisioningCake'], 'true')
    inputs:
      targetType: 'filePath'
      filePath: 'build.sh'
      arguments: --target provision --TeamProject="$(System.TeamProject)"

  - task: UseDotNet@2
    displayName: 'Install .net core $(DOTNET_VERSION)'
    condition: ne(variables['DOTNET_VERSION'], '')
    inputs:
      version: $(DOTNET_VERSION)
      packageType: 'sdk'

  - task: NuGetCommand@2
    displayName: 'NuGet restore Xamarin.Forms'
    inputs:
      command: restore
      restoreSolution: $(SolutionFile)
      feedsToUse: config
      nugetConfigPath: 'eng/DevopsNuget.config'

  - task: NuGetCommand@2
    displayName: 'NuGet restore ControlGallery'
    inputs:
      command: restore 
      restoreSolution: $(ControlGallerySolutionFile)
      feedsToUse: config
      nugetConfigPath: 'eng/DevopsNuget.config'

  - task: InstallAppleCertificate@2
    displayName: 'Install an Apple certificate'
    inputs:
      certSecureFile: 'XamarinForms.p12'
      certPwd: $(P12password)

  - task: InstallAppleProvisioningProfile@1
    displayName: 'Install an Apple provisioning profile'
    inputs:
      provProfileSecureFile: 'Xamarin Forms iOS Provisioning.mobileprovision'

  - task: Bash@3
    displayName: 'Build Control Gallery IPA'
    inputs:
      targetType: 'filePath'
      filePath: 'build.sh'
      arguments: --target cg-ios --BUILD_CONFIGURATION=$(BuildConfiguration)

  - task: Bash@3
    displayName: 'Build iOS Tests'
    inputs:
      targetType: 'filePath'
      filePath: 'build.sh'
      arguments: --target cg-ios-build-tests -BUILD_CONFIGURATION=$(BuildConfiguration)

  - task: CopyFiles@2
    displayName: 'Copy iOS Files for UITest'
    inputs:
      Contents: |
        **/XamarinFormsControlGalleryiOS.ipa
        **/Xamarin.Forms.Core.iOS.UITests/bin/$(BuildConfiguration)/Newtonsoft.Json.*
        **/Xamarin.Forms.Core.iOS.UITests/bin/$(BuildConfiguration)/nunit.*
        **/Xamarin.Forms.Core.iOS.UITests/bin/$(BuildConfiguration)/NUnit3.*
        **/Xamarin.Forms.Core.iOS.UITests/bin/$(BuildConfiguration)/Plugin.*
        **/Xamarin.Forms.Core.iOS.UITests/bin/$(BuildConfiguration)/Xamarin.*
      TargetFolder: '$(build.artifactstagingdirectory)/ios'
      flattenFolders: true

  - task: CopyFiles@2
    displayName: 'Copy iOS dSYM'
    inputs:
      SourceFolder: 'src/ControlGallery/src/Xamarin.Forms.ControlGallery.iOS/bin/iPhone/$(BuildConfiguration)/XamarinFormsControlGalleryiOS.app.dSYM/'
      TargetFolder: '$(build.artifactstagingdirectory)/ios/iPhone/XamarinFormsControlGalleryiOS.app.dSYM/'
      CleanTargetFolder: false
      flattenFolders: false

  - task: CopyFiles@2
    displayName: 'Copy iOS App'
    inputs:
      SourceFolder: 'src/ControlGallery/src/Xamarin.Forms.ControlGallery.iOS/bin/iPhoneSimulator/$(BuildConfiguration)/XamarinFormsControlGalleryiOS.app/'
      TargetFolder: '$(build.artifactstagingdirectory)/ios/iPhoneSimulator/XamarinFormsControlGalleryiOS.app/'
      CleanTargetFolder: false
      flattenFolders: false

  - task: CopyFiles@2
    displayName: 'Copy test-cloud.exe'
    inputs:
      Contents: '**/Xamarin.UITest.*/tools/test-cloud.exe'
      TargetFolder: '$(build.artifactstagingdirectory)/testcloud'
      OverWrite: true
      flattenFolders: true

  - task: CopyFiles@2
    displayName: 'Copy Cake File'
    inputs:
      Contents: |
        build.cake
        build/provisioning/provisioning.csx
        build/provisioning/xcode.csx
      TargetFolder: '$(build.artifactstagingdirectory)'
      CleanTargetFolder: false
      flattenFolders: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: iOS'
    condition: always()
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'
      ArtifactName: OSXArtifacts

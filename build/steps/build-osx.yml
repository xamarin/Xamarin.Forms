steps:
  - checkout: self
    clean: true

  - task: xamops.azdevex.provisionator-task.provisionator@1
    displayName: 'Provision Xcode'
    condition: and(ne(variables['REQUIRED_XCODE'], ''), eq(variables['buildForVS2017'], 'false'))
    inputs:
      provisioning_script: 'build/provisioning/xcode.csx'

  - task: xamops.azdevex.provisionator-task.provisionator@1
    displayName: 'Provisionator'
    condition: and(eq(variables['provisioning'], 'true'), eq(variables['buildForVS2017'], 'false'))
    inputs:
      provisioning_script: $(provisionator.osxPath)
      provisioning_extra_args: $(provisionator.extraArguments) --v

  - script: |
      echo "##vso[task.prependpath]/Library/Frameworks/Mono.framework/Versions/Current/Commands/"
      echo "##vso[task.prependpath]~/Library/Developer/Xamarin/android-sdk-macosx"
    displayName: 'Setup SDK Paths'
    condition: and(ne(variables['osx2019VmPool'], 'Azure Pipelines'), eq(variables['buildForVS2017'], 'false'))

  - task: Bash@3
    displayName: 'Cake Provision'
    condition: or(eq(variables['provisioningCake'], 'true'), eq(variables['buildForVS2017'], 'true'))
    inputs:
      targetType: 'filePath'
      filePath: 'build.sh'
      arguments: --target provision --TeamProject="$(System.TeamProject)" --buildForVS2017=$(buildForVS2017)

  - task: UseDotNet@2
    displayName: 'Install .net core $(DOTNET_VERSION)'
    condition: ne(variables['DOTNET_VERSION'], '')
    inputs:
      version: $(DOTNET_VERSION)
      packageType: 'sdk'

  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet'
    condition: ne(variables['NUGET_VERSION'], '')
    inputs:
      versionSpec: $(NUGET_VERSION)

  - task: DownloadBuildArtifacts@0
    displayName: 'Download build artifact nuget'
    condition: eq(variables['System.TeamProject'], 'DevDiv')
    inputs:
      artifactName: 'nuget'
      downloadPath: '$(Build.ArtifactsDirectory)'

  - task: CopyFiles@2
    displayName: 'Copy Files to: $(System.DefaultWorkingDirectory)'
    condition: eq(variables['System.TeamProject'], 'DevDiv')
    inputs:
      SourceFolder: '$(Build.ArtifactsDirectory)/nuget/$(buildConfiguration)'
      TargetFolder: '$(System.DefaultWorkingDirectory)/Nuget'

  - task: NuGetCommand@2
    displayName: 'NuGet restore'
    inputs:
      command: restore
      restoreSolution: 'Xamarin.Forms.sln'
      feedsToUse: config
      nugetConfigPath: 'DevopsNuget.config'

  - task: InstallAppleCertificate@2
    displayName: 'Install an Apple certificate'
    inputs:
      certSecureFile: 'Xamarin Forms iOS Certificate.p12'
      certPwd: $(P12password)

  - task: InstallAppleProvisioningProfile@1
    displayName: 'Install an Apple provisioning profile'
    inputs:
      provProfileSecureFile: 'Xamarin Forms iOS Provisioning.mobileprovision'

  - task: Bash@3
    displayName: 'Build Control Gallery IPA'
    inputs:
      targetType: 'filePath'
      filePath: 'build.sh'
      arguments: --target cg-ios --buildForVS2017=$(buildForVS2017) --BUILD_CONFIGURATION=$(buildConfiguration) --MSBuildArguments='${{ variables.MSBuildArguments_cg_ios }}'

  - task: Bash@3
    displayName: 'Build iOS Tests'
    inputs:
      targetType: 'filePath'
      filePath: 'build.sh'
      arguments: --target cg-ios-build-tests --buildForVS2017=$(buildForVS2017) --BUILD_CONFIGURATION=$(buildConfiguration) --MSBuildArguments='${{ variables.MSBuildArguments_cg_ios }}'

  - task: CopyFiles@2
    displayName: 'Copy iOS Files for UITest'
    condition: eq(variables['buildForVS2017'], 'false')
    inputs:
      Contents: |
        **/XamarinFormsControlGalleryiOS.ipa
        Xamarin.Forms.Core.iOS.UITests/bin/$(BuildConfiguration)/Newtonsoft.Json.*
        Xamarin.Forms.Core.iOS.UITests/bin/$(BuildConfiguration)/nunit.*
        Xamarin.Forms.Core.iOS.UITests/bin/$(BuildConfiguration)/NUnit3.*
        Xamarin.Forms.Core.iOS.UITests/bin/$(BuildConfiguration)/Plugin.*
        Xamarin.Forms.Core.iOS.UITests/bin/$(BuildConfiguration)/Xamarin.*
      TargetFolder: '$(build.artifactstagingdirectory)/ios'
      CleanTargetFolder: true
      flattenFolders: true
      
  - task: CopyFiles@2
    displayName: 'Copy iOS dSYM'
    condition: eq(variables['buildForVS2017'], 'false')
    inputs:
      SourceFolder: Xamarin.Forms.ControlGallery.iOS/bin/iPhone/$(BuildConfiguration)/XamarinFormsControlGalleryiOS.app.dSYM/
      TargetFolder: '$(build.artifactstagingdirectory)/ios/iPhone/XamarinFormsControlGalleryiOS.app.dSYM/'
      CleanTargetFolder: false
      flattenFolders: false
      
  - task: CopyFiles@2
    displayName: 'Copy iOS App'
    condition: eq(variables['buildForVS2017'], 'false')
    inputs:
      SourceFolder: Xamarin.Forms.ControlGallery.iOS/bin/iPhoneSimulator/$(BuildConfiguration)/XamarinFormsControlGalleryiOS.app/
      TargetFolder: '$(build.artifactstagingdirectory)/ios/iPhoneSimulator/XamarinFormsControlGalleryiOS.app/'
      CleanTargetFolder: false
      flattenFolders: false

  - task: MSBuild@1
    displayName: 'Build Android Tests'
    inputs:
      solution: 'Xamarin.Forms.Core.Android.UITests/Xamarin.Forms.Core.Android.UITests.csproj'
      configuration: $(buildConfiguration)
      msbuildArguments: /bl:$(Build.ArtifactStagingDirectory)/android-uitests-2017_$(buildForVS2017).binlog

  - task: CopyFiles@2
    displayName: 'Copy test-cloud.exe'
    condition: eq(variables['buildForVS2017'], 'false')
    inputs:
      Contents: '**/Xamarin.UITest.*/tools/test-cloud.exe'
      TargetFolder: '$(build.artifactstagingdirectory)/testcloud'
      CleanTargetFolder: true
      OverWrite: true
      flattenFolders: true

  - task: CopyFiles@2
    displayName: 'Copy iOS Files for UITest'
    condition: eq(variables['buildForVS2017'], 'false')
    inputs:
      Contents: |
        **/XamarinFormsControlGalleryiOS.ipa
        Xamarin.Forms.Core.iOS.UITests/bin/$(BuildConfiguration)/Newtonsoft.Json.*
        Xamarin.Forms.Core.iOS.UITests/bin/$(BuildConfiguration)/nunit.*
        Xamarin.Forms.Core.iOS.UITests/bin/$(BuildConfiguration)/NUnit3.*
        Xamarin.Forms.Core.iOS.UITests/bin/$(BuildConfiguration)/Plugin.*
        Xamarin.Forms.Core.iOS.UITests/bin/$(BuildConfiguration)/Xamarin.*
      TargetFolder: '$(build.artifactstagingdirectory)/ios'
      CleanTargetFolder: true
      flattenFolders: true

  - task: CopyFiles@2
    displayName: 'Copy iOS dSYM'
    condition: eq(variables['buildForVS2017'], 'false')
    inputs:
      Contents: |
        **/*.dSYM/**/*.*
      TargetFolder: '$(build.artifactstagingdirectory)/ios'
      CleanTargetFolder: false
      flattenFolders: false

  - task: CopyFiles@2
    displayName: 'Copy iOS Files for UITest 2017'
    condition: eq(variables['buildForVS2017'], 'true')
    inputs:
      Contents: |
       **/$(IpaName)
       Xamarin.Forms.Core.iOS.UITests/bin/$(BuildConfiguration)/Newtonsoft.Json.*
       Xamarin.Forms.Core.iOS.UITests/bin/$(BuildConfiguration)/nunit.*
       Xamarin.Forms.Core.iOS.UITests/bin/$(BuildConfiguration)/NUnit3.*
       Xamarin.Forms.Core.iOS.UITests/bin/$(BuildConfiguration)/Plugin.*
       Xamarin.Forms.Core.iOS.UITests/bin/$(BuildConfiguration)/Xamarin.*

      TargetFolder: '$(build.artifactstagingdirectory)/ios_2017'
      CleanTargetFolder: true
      flattenFolders: true

  - task: CopyFiles@2
    displayName: 'Copy Android Files for UITest'
    condition: eq(variables['buildForVS2017'], 'false')
    inputs:
      Contents: |
       Xamarin.Forms.Core.Android.UITests/bin/$(BuildConfiguration)/Newtonsoft.Json.*
       Xamarin.Forms.Core.Android.UITests/bin/$(BuildConfiguration)/nunit.*
       Xamarin.Forms.Core.Android.UITests/bin/$(BuildConfiguration)/NUnit3.*
       Xamarin.Forms.Core.Android.UITests/bin/$(BuildConfiguration)/Plugin.*
       Xamarin.Forms.Core.Android.UITests/bin/$(BuildConfiguration)/Xamarin.*

      TargetFolder: '$(build.artifactstagingdirectory)/android'
      CleanTargetFolder: true
      flattenFolders: true

  - task: CopyFiles@2
    displayName: 'Copy Cake File'
    inputs:
      Contents: |
        build.cake
        build/provisioning/provisioning.csx
        build/provisioning/xcode.csx
      TargetFolder: '$(build.artifactstagingdirectory)'
      CleanTargetFolder: false
      flattenFolders: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: iOS'
    condition: always()
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'
      ArtifactName: OSXArtifacts

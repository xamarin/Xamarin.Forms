parameters:
  name: ''            # in the form type_platform_host
  displayName: ''     # the human name
  vmImage: ''         # the VM image
  vmPool: ''         # the VM pool
  targetFolder: ''    # the bootstrapper target
  dependsOn: []       # the dependiencies
  preBuildSteps: []   # any steps to run before the build
  postBuildSteps: []  # any additional steps to run after the build
  slnPath : 'Xamarin.Forms.sln'
  buildTaskPath : 'Xamarin.Forms.Build.Tasks/Xamarin.Forms.Build.Tasks.csproj'
  androidPath : 'Xamarin.Forms.ControlGallery.Android'
  androidProjectPath : 'Xamarin.Forms.ControlGallery.Android/Xamarin.Forms.ControlGallery.Android.csproj'
  androidProjectArguments : ''
  buildConfiguration : 'Debug'
  nugetVersion: $(NUGET_VERSION)
  monoVersion: $(MONO_VERSION)
  apkTargetFolder: '$(build.artifactstagingdirectory)/androidApp'
  provisionatorPath: 'build/provisioning/provisioning.csx'
  provisionatorExtraArguments: ''

jobs:
  - job: ${{ parameters.name }}
    workspace:
      clean: all
    displayName: ${{ parameters.displayName }}
    timeoutInMinutes: 120
    pool:
      name: ${{ parameters.vmImage }}
    dependsOn: ${{ parameters.dependsOn }}
    steps:
      - checkout: self
        clean: true

      - task: xamops.azdevex.provisionator-task.provisionator@1
        displayName: 'Provisionator'
        condition: eq(variables['provisioning'], 'true')
        inputs:
          provisioning_script: ${{ parameters.provisionatorPath }}
          provisioning_extra_args: ${{ parameters.provisionator.extraArguments }}

      - task: Bash@3
        displayName: 'Cake Provision'
        condition: eq(variables['provisioningCake'], 'true')
        inputs:
          targetType: 'filePath'
          filePath: 'build.sh'
          arguments: --target provision

      - task: UseDotNet@2
        displayName: 'Install .net core $(DOTNET_VERSION)'
        condition: ne(variables['DOTNET_VERSION'], '')
        inputs:
          version: $(DOTNET_VERSION)
          packageType: 'sdk'

      - script: '/bin/bash -c "sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh ${{ parameters.monoVersion }}"'
        displayName: 'Select MONO ${{ parameters.monoVersion }}'

      - task: NuGetToolInstaller@1
        displayName: 'Use NuGet'
        condition: ne(variables['NUGET_VERSION'], '')
        inputs:
          versionSpec: $(NUGET_VERSION)

      - task: NuGetCommand@2
        displayName: 'NuGet restore ${{ parameters.slnPath }}'
        inputs:
          restoreSolution:  ${{ parameters.slnPath }}

      - task: MSBuild@1
        displayName: 'Build ${{ parameters.buildTaskPath  }}'
        inputs:
          solution: ${{ parameters.buildTaskPath }}
          configuration: ${{ parameters.buildConfiguration }}

      - task: MSBuild@1
        displayName: 'Build Android ${{ parameters.name }}'
        inputs:
          solution: ${{ parameters.androidProjectPath }}
          configuration: ${{ parameters.buildConfiguration }}
          msbuildArguments: ${{ parameters.androidProjectArguments }}

      - task: CopyFiles@2
        displayName: 'Copy ${{ parameters.name }}'
        inputs:
          SourceFolder: ${{ parameters.androidPath }}/bin/${{ parameters.buildConfiguration }}/
          Contents: '**/*.apk'
          TargetFolder: ${{ parameters.targetFolder }}
          CleanTargetFolder: true
          OverWrite: true

      - task: CopyFiles@2
        displayName: 'Copy Android apk ${{ parameters.name }} for UITest'
        inputs:
          Contents: |
            ${{ parameters.targetFolder }}/$(ApkName)
          TargetFolder: ${{ parameters.apkTargetFolder }}
          CleanTargetFolder: true

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: AndroidApps'
        condition: always()
        inputs:
          PathtoPublish: '$(build.artifactstagingdirectory)'
          ArtifactName: OSXArtifacts